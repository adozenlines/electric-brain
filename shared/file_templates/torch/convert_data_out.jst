{{ var topLevelFields = it.schema.topLevelFields; }}
{{ var hasFixedTensor = topLevelFields.length > 0 ? 1 : 0; }}
{{ var topLevelSequences = it.schema.topLevelSequences; }}
    local transformed{{=it.depth}} = {}
{{ var fixedTensorPos = 1; }}
{{~ topLevelFields:field:index}}
    {{? field.isNumber }}
        {{? field.enum }}
            local probs, index = torch.max(data{{=it.depth}}[1]:narrow(3, {{=fixedTensorPos}}, {{=field.tensorSize}})[1][1], 1)
            transformed{{=it.depth}}["{{=field.variablePathFrom(it.schema).replace(".", "").replace(/\./g, "\"][\"")}}"] = index[1] - 1
        {{?}}
        {{? !field.enum }}
            transformed{{=it.depth}}["{{=field.variablePathFrom(it.schema).replace(".", "").replace(/\./g, "\"][\"")}}"] = data{{=it.depth}}[1][1][1][{{=fixedTensorPos}}]
        {{?}}
    {{?}}
    {{ fixedTensorPos += field.tensorSize; }}
{{~}}
{{~ topLevelSequences:sequence:index}}
    transformed{{=it.depth}}.{{=sequence.machineVariableName}} = {}
    for n = 1, #data{{=it.depth}}[{{=index+1+hasFixedTensor}}] do
        local data{{=it.depth + 1}} = data{{=it.depth}}[{{=index+1+hasFixedTensor}}][n]

        {{= it.convertDataOut({schema: sequence.items, convertDataOut: it.convertDataOut, depth: it.depth + 1}) }}

        table.insert(transformed{{=it.depth}}.{{=sequence.machineVariableName}}, transformed{{=it.depth + 1}})
    end
{{~}}
