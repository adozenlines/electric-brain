{{ var topLevelFields = it.schema.topLevelFields; }}
{{ var hasFixedTensor = it.schema.tensorSize > 0 ? 1 : 0; }}
{{ var topLevelSequences = it.schema.topLevelSequences; }}
    local transformed{{=it.depth}} = {}
    {{?hasFixedTensor}}
        transformed{{=it.depth}}[1] = torch.zeros(1, 1, {{=it.schema.tensorSize}})
    {{?}}
{{ var fixedTensorPos = 1; }}
{{~ topLevelFields:field:index}}
    {{? field.isNumber }}
        {{? field.enum }}
            transformed{{=it.depth}}[1][1][1][{{=fixedTensorPos}} + data{{=it.depth}}["{{=field.variablePathFrom(it.schema).replace(".", "").replace(/\./g, "\"][\"")}}"]] = 1
        {{?}}
        {{? !field.enum }}
            transformed{{=it.depth}}[1][1][1][{{=fixedTensorPos}}] = data{{=it.depth}}["{{=field.variablePathFrom(it.schema).replace(".", "").replace(/\./g, "\"][\"")}}"]
        {{?}}
    {{?}}
    {{ fixedTensorPos += field.tensorSize; }}
{{~}}
{{~ topLevelSequences:sequence:index}}
    transformed{{=it.depth}}[{{=index+1+hasFixedTensor}}] = {}
    for n = 1, #data{{=it.depth}}["{{=sequence.variableName}}"] do
        local data{{=it.depth + 1}} = data{{=it.depth}}["{{=sequence.machineVariableName}}"][n]

        {{= it.convertDataIn({schema: sequence.items, convertDataIn: it.convertDataIn, depth: it.depth + 1}) }}

        table.insert(transformed{{=it.depth}}[{{=index+1+hasFixedTensor}}], transformed{{=it.depth + 1}})
    end
{{~}}
{{~ topLevelFields:field:index}}
    {{? field.isBinary }}
        local decoded{{=it.depth}}_{{=field.machineVariableName}} = mime.unb64(data{{=it.depth}}["{{=field.variablePathFrom(it.schema).replace(".", "").replace(/\./g, "\"][\"")}}"])
        local bytes{{=it.depth}}_{{=field.machineVariableName}} = torch.ByteStorage()
        bytes{{=it.depth}}_{{=field.machineVariableName}}:string(decoded{{=it.depth}}_{{=field.machineVariableName}})
        local tensor{{=it.depth}}_{{=field.machineVariableName}} = torch.ByteTensor(bytes{{=it.depth}}_{{=field.machineVariableName}})
        transformed{{=it.depth}}[{{=index+1+hasFixedTensor+topLevelSequences.length}}] = image.decompress(tensor{{=it.depth}}_{{=field.machineVariableName}}, 3)
    {{?}}
{{~}}