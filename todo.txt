Refactoring:
    EBArchitecture:
        - Architectures should reference an existing data-source object, rather then composing one within itself
    EBDataTransformation:
        - Break up EBDataTransformation into a bunch of separate sub-classes, instead of keeping it in the same class.
          Ideally, instead of having transformations based on the data type, like EnumTransformation, we instead
          have it based on the method, like OneHotTransformation. Which data-types it applies to is just a categorization,
          and the grouping can be handled by the interface.
        - Create a registry for all data transformations.
        - Some way of separating the code that can only be executed on the backend from shared pure javascript code,
          e.g. code transformations, which might be done in a language that can't be executed on the browser
        - Implement a way of coupling these transformation classes to frontend code that configures those transformations
        - Change the template for code transformations to be a Dot.js template that gets build along with everything else
    EBAPIRoot:
        - I think that more of the code for some of the API endpoints could be moved here. Particularly generic code for CRUD endpoints that
          could be reused between all three models to make development faster
    Server:
        - Search for all instances of numberOfObjectsToSample and move them all to a common configuration file. Eventually, the user
          should be able to decide on the frontend.
    CSS:
        - Convert all of our CSS code to use SASS or LESS.
        - The CSS code should exactly mirror the structure of the javascript. E.g. if there is a directive, all of that directives
          styles should be within a single LESS file that has the same name as the directive
    EBSchema:
        - Simplify EBSchema to remove things that our own code does not support, such as anyOf or oneOf, or the type
          field when its just a plain string instead of an array
    Filenames:
        - We should do something so that all of our filenames match the class names within exactly. This may mean TitleCasing all
          of our files
        - Change build/torch to build/file_templates/torch
    Random:
        - We should harmonize the way we use underscore between frontend and backend code. I think in both places, we should either
          use the '_' symbol itself, or fully write out the word underscore. No mixed usages
    General:
        - Switch more of our code, such as in architecture_generator.js, to use promises.
        - All the application.db.collection("EBModel") needs to be refactored to be more like application.db.collection(EBModel.getMongoCollectionName())


Known Bugs:
    Data Source:
        - When editing a an existing data source, the logo for the database in the top left corner of the screen doesn't match
          the chosen database type
    Server / API Middleware:
        - Filtering parameters for input doesn't work well with EBSchema
    Grunt:
        - grunt watch doesn't work



UI Tweaks / Improvements:
    General:
        - If you end up on /app/, the screen will display blank. This should redirect you to a dashboard page
    Dashboard:
        - Need to implement this. We should do something better with the empty-screen problem. This is where
          the interface looks bad because a user is new and they don't have any data in their account. Websites
          typically fix this by having special screens when there is no data which guide you through getting
          started.
    Data Source:
        - When initially loading a schema for a collection, the "schema" area shows for half a second without any
          fields in it. It shouldn't show at all unless it has the fields to show as well
        - This screen needs loading dialogs and such when connecting to DB and obtaining the schema
        - Generate a default value for name
        - Screen shouldn't refresh when saving model for first time
        - Save button needs a loading icon
        - Field details screen  shouldn't show cardinality information for fields that don't have it, like objects or arrays
        - Either implement the "Filter Tables" text-area, or delete it
    Schema Editor:
        - Doesn't really do much editing, it just allows you to pick which fields in the schema are included
          for next stage of processing. Thus, maybe we should rename to schema-filter-editor or schema-reducer
          or something like this. Will need to come up with a good name
        - It should show the type of the fields along with those fields, in the JSDoc "{type} field_name" format.
        - (Maybe) Selecting an array/object field for inclusion automatically selects all of its sub fields/sub objects
        - The coloring / hiliting we do for selecting a field and checking a field for inclusion need to change.
          selection doesn't feel like selection, and clicking the checkbox doesn't make a big enough visual difference
          to include a field has been included
        - The field details bit needs to scroll when you scroll down. Its useless being a the top when your all the way
          scrolled down looking at fields near the bottom
    Architecture -> Configure Inputs:
        - Preferably none of inputs are open by default
        - Do we need to show object/array fields here? There aren't any data transformations we can apply to them
        - Need to implement the boolean transformation screen
        - Should be possible to select "No Transformation" easily - and maybe this should be the default.
        - We shouldn't show every possible transformation type for every field. Only transformations that would
          apply to that field



Server / API Middleware:
    - When it can, the middleware should automatically convert incoming JSON requests to their javascript model objects,
      for convenience
    - (FUTURE) self documenting endpoints
    - Going to /app should redirect you to /app/
    - None of the API endpoints should contain dashes in them. better to be pure alphanumeric for maximum compatibility with other systems



Schemas:
    - Need to implement full support of vanilla arrays, e.g. arrays that are just strings or numbers instead of objects
    - Implement a map() and mapObject() functions, both with async versions
    - Implement union() and difference() functions
    - Make sure that every walk/climb/transform function has both synchronous and asynchronous versions, where applicable
    - A convenient function should be created to map metadata from one schema to another similar schema. This can be used
      so that configuration doesn't get lost, even if a schema changes somewhat in an unpredictable fashion
    - Convenience methods to lookup up a particular schema within the tree when given a variablePath
    - Convenience methods to validate objects and to filter out anything not in the schema
    - Create a function that returns a flattened version of the schema. This is just where all unnecessary sub-objects are flattened
      so that their fields are part of the parent object. This should also have convenient way of converting real objects from their
      full version to their flattened version
    - Need to make all of the walk-schema methods recurse simply by calling their own walk-schema method, instead
      of recursing internally.
    - Preferably, walk object has some graceful error handling if the object does not conform to the schema
    - (MAYBE) Every schema object should keep track of both the original schema, and the new schema that results after
      transformations have been applied.
    - Automatic schema detection should be a background task. The admin should present a progress bar with some
      diagnostic information.
    - Should have thorough unit tests for all the schema manipulation functions
    - Read the documentation for underscore.js, and try and come up with more useful utility functions that we could code
      that would apply to schemas
    - (Maybe) Implement native support for binary data
    - We should have a set of convenience functions for validating that a schema conforms to some set of requirements. For example,
      checking if it only contains numbers or arrays, a requirement for inputs to neural networks. Or checking if it is flat - having
      no extra object sub-schemas that aren't necessary.
    - We should separate configuration for a particular schema entry, like its transformation which is configured by the user,
      from the metadata for that schema entry, such as cardinality and known values which are determined automatically by the
      schema detection code.
    - It would be nice if Schemas became a first-class object within electric brain. This way, when creating an architecture, you
      don't choose a data source. You choose the schema from that data source. Later when training a model on that architecture,
      you have the option of selecting different data sources as long as they produce the same schema
    - Merge the function in schema_utilities.js into the EBSchema class
    - We need to make a hard linguistic distinction between "schema" and "field". Currently we use them interchangeably, but
      moving forward, we should only use "field" when the schema question is for a single field, like a string or number, vs.
      an array or object.
    - Schema differencing function? (might be useful someday)



New Features:
    Data Source:
        - Be able to enter an arbitrary mongo query, so that we can filter which objects are included in the data source.
        - Able to populate referenced documents
        - Should be able to have a "whole object" transformation that processes all objects that come out of the data source
    Architecture -> Configure Inputs:
        - Implement the preview button. Find a new place for it on the interface. Maybe "preview" functionality
          should be general purpose, so that it could be applied to the data-source screen and the configure
          output screen as well
        - Would be nice if we could preview just one fields transformation, rather then the object as a whole
        - The system should verify that all the outputs conform to the required format for neural networks, e.g.
          that every field is either a number, object or an array. It should present an error to the user if this
          is not the case, along with diagnostic information.
    Front End:
        - We need a general purpose error handler for all unsuccessful HTTP calls

